ООП (Объектно-Ориентированное Программирование) — это парадигма программирования, основанная на концепции объектов, которые объединяют данные (поля) и методы (функции) для их обработки. Основные принципы ООП включают инкапсуляцию (сокрытие внутренней реализации), наследование (создание новых классов на основе существующих), полиморфизм (возможность использования объектов разных классов через единый интерфейс) и абстракцию (выделение существенных характеристик объекта). Например, в системе управления университетом можно создать класс «Студент» с полями «имя», «курс» и методами «сдать экзамен», «получить стипендию».

Объектно-ориентированная декомпозиция — это процесс разбиения сложной системы на логически связанные объекты, которые взаимодействуют между собой. В отличие от процедурного подхода, где акцент делается на последовательности действий, ОО-декомпозиция focuses на моделировании сущностей предметной области. Например, при разработке банковской системы выделяются классы «Счет», «Клиент», «Транзакция», каждый из которых отвечает за свою часть функциональности.

Дизайн ПО — это этап проектирования архитектуры программного обеспечения, включающий определение структуры компонентов, их взаимодействия и принципов работы. Дизайн охватывает выбор технологий, проектирование интерфейсов, проектирование базы данных и обеспечение масштабируемости. Примеры: 
- Многослойная архитектура (presentation layer, business logic, data access layer);
- Использование паттернов проектирования (например, MVC в веб-приложениях);
- Проектирование API для взаимодействия между микросервисами.

Магическое число 7 Миллера в контексте IT проявляется в ограничении человеческого восприятия и используется для улучшения юзабилити:
1. Ограничение количества пунктов меню до 7±2.
2. Группировка информации в интерфейсах (например, 7 основных блоков на странице).
3. Оптимальное количество вкладок в браузере или приложении.
4. Ограничение глубины вложенности директорий в файловой системе.
5. Количество полей в формах ввода данных.
6. Число параметров в конструкторах классов.
7. Количество элементов в навигационных панелях.

5 признаков сложных систем по Гради Бучу с примерами из IT:

1. Иерархичность: Система состоит из вложенных подсистем.  
   Windows: ядро → системные службы → драйверы → приложения.  
   Google Поиск: краулеры → индексаторы → ранкеры → интерфейс.  
   Minecraft: движок → генерация мира → физика → игровые объекты.

2. Относительная простота компонентов: Каждый уровень решает ограниченный круг задач.  
   В Windows драйвер устройства не знает о логике приложений.  
   В Google Поиск краулер только собирает данные, не участвуя в ранжировании.

3. Разделение на части с четкими интерфейсами:  
   Windows API — интерфейс между приложениями и ОС.  
   REST API в микросервисной архитектуре.  
   Библиотеки DLL для повторного использования кода.

4. Эмерджентность: Возникновение новых свойств системы при интеграции компонентов.  
   Minecraft: из простых блоков возникают сложные механизмы и автоматизация.  
   Нейросети: из простых нейронов возникают способности к распознаванию образов.

5. Коммуникация через стандартизированные протоколы:  
   TCP/IP для сетевого взаимодействия.  
   SQL для работы с базами данных.  
   JSON/XML для обмена данными между приложениями.